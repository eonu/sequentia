import librosa
from sequentia.preprocessing import Compose, Custom, Standardize
from sequentia.classifiers import GMMHMM
from sequentia.datasets import load_digits

# Class to be represented by the HMM
digit = 4

# Load the FSDD dataset and split into training and testing
# (only fetch recordings of digit 4)
dataset = load_digits(numbers=(digit,))
train_set, test_set = dataset.split(split_size=0.2, stratify=True, shuffle=True)

# Set MFCC configuration
spec_kwargs = {'sr': 8000, 'n_mfcc': 5, 'n_fft': 1024, 'hop_length': 256, 'power': 2}

# Create preprocessing pipeline
transforms = Compose([
    Custom(lambda x: librosa.feature.mfcc(x.flatten(), **spec_kwargs).T, name='MFCCs', desc='Generate MFCCs'),
    Standardize()
])

# Apply transformations to the training and test set
train_set.X = transforms(train_set.X)
test_set.X = transforms(test_set.X)

# Create a linear HMM to represent the digit 4, with 3 states and 5 components in the GMM emission state distributions
hmm = GMMHMM(label=digit, n_states=3, n_components=5, topology='linear')
# Set random initial state distributions and transition matrix according to the linear topology
hmm.set_random_initial()
hmm.set_random_transitions()
# Fit the HMM on recordings of the digit 4
hmm.fit(train_set.X)

# Calculate the forward probability for a new sequence (likelihood being generated by this HMM)
y0_forward = hmm.forward(test_set.X[0])